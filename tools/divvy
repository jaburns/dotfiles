#!/usr/bin/env bash

if [[ "$1" == 'next-monitor' ]]; then
    layoutIndex=-1
else
    lastSeconds="$(date +%s -r /tmp/win_move.js)"
    curSeconds="$(date +%s)"
    layoutIndex=0

    if (( "$(( $curSeconds - $lastSeconds ))" < 2 )); then
        if [[ ! -f /tmp/win_move.counter ]]; then
            echo -1 > /tmp/win_move.counter
        fi
        layoutIndex="$(cat /tmp/win_move.counter)"
        layoutIndex="$(( ( $layoutIndex + 1 ) % 2 ))"
    fi
fi

echo "$layoutIndex" > /tmp/win_move.counter

>/tmp/win_move.js echo '
const TASK_BAR_HEIGHT = 24;
const LAYOUTS = [
    // x, y, w, h
    [ 0.125, 0.0, 0.75, 1.0 ],
    [ 0.250, 1/6, 0.50, 4/6 ],
];

const { win, monitors } = JSON.parse(process.argv[2]);

const woff = 2 * win[2];
const hoff = win[2] + win[3];

const ox = win[0] - win[2];
const oy = win[1] - win[3];
const ow = win[4] + woff;
const oh = win[5] + hoff;

const cx = ox + ow / 2;
const cy = oy + oh / 2;

let monitorIndex = 0;

for (let i = 0; i < monitors.length; ++i) {
    const [ mw, mh, mx, my ] = monitors[i];
    if (cx >= mx && cx <= mx + mw && cy >= my && cy <= my + mh) {
        monitorIndex = i;
        break;
    }
}

let [ mw, mh0, mx, my ] = monitors[monitorIndex];
let mh = mh0 - TASK_BAR_HEIGHT;

const layoutIndex = parseInt(process.argv[3]);
const layout = layoutIndex >= 0
    ? LAYOUTS[layoutIndex]
    : [ (ox-mx)/mw, (oy-my)/mh, ow/mw, oh/mh ];

if (layoutIndex < 0) {
    monitorIndex = (monitorIndex + 1) % monitors.length;
    [ mw, mh0, mx, my ] = monitors[monitorIndex];
    mh = mh0 - TASK_BAR_HEIGHT;
}

const nx = Math.floor( mx + layout[0] * mw );
const ny = Math.floor( my + layout[1] * mh );
const nw = Math.floor( layout[2] * mw );
const nh = Math.floor( layout[3] * mh );

console.log(`${nx},${ny},${nw - woff},${nh - hoff}`);
'

make_array_from_lines() {
    xargs echo \
        | sed 's/^/\[/;s/ /,/g;s/$/\]/'
}

get_win_id() {
    xprop -root _NET_ACTIVE_WINDOW \
        | sed 's/.* # //g;s/, .*//g'
}

get_win_info() {
    xwininfo -id "$1" \
        | grep -E "upper-left|Width:|Height:" \
        | cut -d: -f2 \
        | make_array_from_lines
}

get_monitor_info() {
    xrandr \
        | grep ' connected' \
        | grep -v 'connected (' \
        | sed 's/primary //g' \
        | cut -d\  -f3 \
        | sed 's/[+x]/,/g;s/^/\[/;s/$/\]/' \
        | make_array_from_lines
}

get_json() {
    local win="$(get_win_info $win_id)"
    local monitors="$(get_monitor_info)"

    echo "{\"win\":$win,\"monitors\":$monitors}"
}

main() {
    local win_id="$(get_win_id)"
    local new_xywh="$(node /tmp/win_move.js "$(get_json)" "$1")"

    wmctrl -i -r "$win_id" -e "0,$new_xywh"
}

main "$layoutIndex"
